#loading the data
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

data=pd.read_csv("Uni_linear.txt",header=None)
data.head()
data.tail()
data
data.describe()
data.plot()

#ploting of data
plt.scatter(data[0],data[1])
plt.xticks(np.arange(5,30,5))
plt.yticks(np.arange(-5,30,5))
plt.xlabel("Population of City(10,000s)")
plt.ylabel("Profit ($10,000)")
plt.title("Profit Prediction")

#compute the cost
def computecost(X,y,w):
    m=len(y)
    X=np.append(np.ones((m,1)),data_n[:,0].reshape(m,1),axis=1)
    predictions=X.dot(w)
    square_err=(predictions - y)**2
    return 1/(2*m)*np.sum(square_err)
X=np.append(np.ones((m,1)),data_n[:,0].reshape(m,1),axis=1)
print(X)
data_n=data.values
m=97
X=np.append(np.ones((m,1)),data_n[:,0].reshape(m,1),axis=1)
y=data_n[:,1].reshape(m,1)
w=np.zeros((2,1))
computecost(X,y,w)

#gradient descent
def gradientDescent(X,y,w,alpha,num_iters):
    m=len(y)
    J_history=[]
    
    for i in range(num_iters):
        predictions = X.dot(w)    
        error = np.dot(X.transpose(),(predictions -y))
        descent=alpha * 1/m * error
        w-=descent
        J_history.append(computecost(X,y,w))
    return w, J_history
print(w)
w,J_history = gradientDescent(X,y,w,0.01,1500)
print("h(x) ="+str(round(w[0,0],2))+" + "+str(round(w[1,0],2))+"x1")

#Testing the implementation
plt.plot(J_history)
plt.xlabel("Iteration")
plt.ylabel("$J(\w)$")
plt.title("Cost function using Gradient Descent")

#Graph with Line of Best Fit
plt.scatter(data[0],data[1])
x_value=[x for x in range(25)]
y_value=[y*w[1]+w[0] for y in x_value]
plt.plot(x_value,y_value,color="r")
plt.xticks(np.arange(5,30,step=5))
plt.yticks(np.arange(-5,30,step=5))
plt.xlabel("Population of City (10,000s)")
plt.ylabel("Profit ($10,000)")
plt.title("Profit Prediction")

#Make predictions using the optimized 'w' values
def predict(x,theta):
    predictions= np.dot(theta.transpose(),x)
    return predictions[0]
predict1=predict(np.array([1,3.5]),w)*10000
print("For population = 35,000, we predict a profit of $"+str(round(predict1,0)))
predict2=predict(np.array([1,7]),w)*10000
print("For population = 70,000, we predict a profit of $"+str(round(predict2,0)))
